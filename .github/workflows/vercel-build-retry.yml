name: Vercel Build with Retry Logic
on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main  # Trigger on commits/merges to main branch
  pull_request:
    types: [closed]  # Trigger when PRs are merged
    branches:
      - main

jobs:
  deploy-with-retry:
    name: Deploy to Vercel with Retry Logic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'  # Use pnpm cache for faster installs

      - name: Install dependencies (includes Vercel CLI)
        run: |
          pnpm install vercel -g
          echo "Vercel CLI version:"
          vercel --version

      - name: Deploy to Vercel with Retry Logic
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          # # Optional: bypass content check on retries
          # BYPASS_RECENT_CONTENT_CHECK: 'true'
        run: |
          MAX_ATTEMPTS=3
          ATTEMPT_NUM=1
          DELAY_SECS=10

          while [ $ATTEMPT_NUM -le $MAX_ATTEMPTS ]; do
            echo "::group::Build and Deploy Attempt $ATTEMPT_NUM of $MAX_ATTEMPTS"
            CURRENT_STEP_FAILED=false
            LAST_ERR_OUTPUT=""

            # Function to execute Vercel commands robustly
            run_vercel_command() {
              local command_description="$1"
              shift
              local vercel_command_line="$@"
              local tmp_output_file
              tmp_output_file=$(mktemp)

              echo "[Attempt $ATTEMPT_NUM] $command_description (with --debug)..."
              if eval "$vercel_command_line" > "$tmp_output_file" 2>&1; then
                CMD_EXIT_CODE=0
              else
                CMD_EXIT_CODE=$?
              fi
              CMD_OUTPUT=$(cat "$tmp_output_file")
              rm "$tmp_output_file"

              if [ $CMD_EXIT_CODE -eq 0 ]; then
                echo "[Attempt $ATTEMPT_NUM] $(echo $command_description | sed 's/ing/ed/') successful."
                # To log success output, uncomment below and customize message
                # echo -e "--- Vercel $(echo $command_description | sed 's/ing/ed/') Output (Success) ---\n$CMD_OUTPUT\n---------------------------"
                return 0 # Success
              else
                echo "[Attempt $ATTEMPT_NUM] $(echo $command_description | sed 's/ing/ed/') failed with exit code $CMD_EXIT_CODE ❌"
                echo -e "--- Vercel $(echo $command_description | sed 's/ing/ed/') Output (Failure) ---\n$CMD_OUTPUT\n-------------------------------------"
                CURRENT_STEP_FAILED=true
                LAST_ERR_OUTPUT=$CMD_OUTPUT
                return 1 # Failure
              fi
            }

            # 1. Vercel Pull
            run_vercel_command "Pulling Vercel project settings" \
              "pnpm exec vercel pull --yes --environment=production --token $VERCEL_TOKEN --debug"
            PULL_SUCCESS=$?

            # 2. Vercel Build (only if pull succeeded)
            if [ $PULL_SUCCESS -eq 0 ]; then
              run_vercel_command "Building project with Vercel" \
                "pnpm exec vercel build --prod --token $VERCEL_TOKEN --debug"
              BUILD_SUCCESS=$?
            else
              BUILD_SUCCESS=1 # Mark as failed if pull failed
            fi

            # 3. Vercel Deploy Prebuilt (only if pull and build succeeded)
            if [ $PULL_SUCCESS -eq 0 ] && [ $BUILD_SUCCESS -eq 0 ]; then
              TMP_DEPLOY_OUTPUT_FILE=$(mktemp)
              echo "[Attempt $ATTEMPT_NUM] Deploying prebuilt project to Vercel (with --debug)..."
              if pnpm exec vercel deploy --prebuilt --prod --token $VERCEL_TOKEN --debug > "$TMP_DEPLOY_OUTPUT_FILE" 2>&1; then
                DEPLOY_CMD_OUTPUT=$(cat "$TMP_DEPLOY_OUTPUT_FILE")
                rm "$TMP_DEPLOY_OUTPUT_FILE"
                echo "[Attempt $ATTEMPT_NUM] Deployment of prebuilt successful! ✅"
                echo -e "--- Vercel Deploy Output (Success) ---\n$DEPLOY_CMD_OUTPUT\n--------------------------------------"
                echo "::endgroup::"
                exit 0 # Overall success
              else
                DEPLOY_EXIT_CODE=$?
                DEPLOY_CMD_OUTPUT=$(cat "$TMP_DEPLOY_OUTPUT_FILE")
                rm "$TMP_DEPLOY_OUTPUT_FILE"
                echo "[Attempt $ATTEMPT_NUM] Deployment of prebuilt failed with exit code $DEPLOY_EXIT_CODE ❌"
                echo -e "--- Vercel Deploy Output (Failure) ---\n$DEPLOY_CMD_OUTPUT\n---------------------------------------"
                CURRENT_STEP_FAILED=true
                LAST_ERR_OUTPUT=$DEPLOY_CMD_OUTPUT
              fi
            elif [ $PULL_SUCCESS -ne 0 ] || [ $BUILD_SUCCESS -ne 0 ]; then
                # If pull or build failed, this attempt has failed. CURRENT_STEP_FAILED already true from those steps.
                echo "[Attempt $ATTEMPT_NUM] Skipping deploy due to previous step failure."
            fi

            if [ "$CURRENT_STEP_FAILED" = true ]; then
              echo "[Attempt $ATTEMPT_NUM] failed. Review Vercel output above."
              if [ $ATTEMPT_NUM -lt $MAX_ATTEMPTS ]; then
                echo "Waiting for $DELAY_SECS seconds before next attempt ($((ATTEMPT_NUM + 1)) of $MAX_ATTEMPTS)..."
                sleep $DELAY_SECS
                DELAY_SECS=$((DELAY_SECS * 2))
              fi
            fi

            echo "::endgroup::"
            ATTEMPT_NUM=$((ATTEMPT_NUM + 1))
          done

          echo "All $MAX_ATTEMPTS deployment attempts failed. See logs."
          exit 1

      - name: Notify on Success
        if: success()
        run: echo "Vercel deployment completed successfully!"

      - name: Notify on Failure
        if: failure()
        run: echo "Vercel deployment failed after multiple attempts. Please check the logs."