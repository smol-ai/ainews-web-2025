---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import BackToPrevious from "@components/BackToPrevious.astro";

export const prerender = true; // try to make sure this is prerendered

// Helper function to determine tag type
export function getTagType(
  tag: string, 
  companies: string[], 
  models: string[], 
  topics: string[],
  people: string[]
): string {
  if (companies.includes(tag)) return "Company";
  if (models.includes(tag)) return "Model";
  if (topics.includes(tag)) return "Topic";
  if (people.includes(tag)) return "Person";
  return "Tag"; // Default fallback
}

export async function getStaticPaths() {
  const posts = await getCollection("issues", ({ data }) => !data.draft);
  console.log("Total issues posts found:", posts.length);

  // Get unique tags from all tag types
  const companies = [...new Set(posts.flatMap((post) => post.data.companies || []))];
  const models = [...new Set(posts.flatMap((post) => post.data.models || []))];
  const topics = [...new Set(posts.flatMap((post) => post.data.topics || []))];
  const people = [...new Set(posts.flatMap((post) => post.data.people || []))];
  
  console.log("Unique tags found:", {
    companies: companies.length,
    models: models.length,
    topics: topics.length,
    people: people.length
  });
  // Prerender all tag pages
  const allTags = [...companies, ...models, ...topics, ...people];
  return allTags.map(tag => ({
    params: { id: tag },
    props: { tag, tagType: getTagType(tag, companies, models, topics, people) }
  }));
}

// Dynamic route handling
const { id } = Astro.params;
// console.log("Current tag ID:", id);

// Get data for this specific tag
const allPosts = await getCollection("issues", ({ data }) => !data.draft);
// console.log("Posts found for current tag:", allPosts.length);

// Get all tag categories for classification
const allCompanies = [...new Set(allPosts.flatMap((post) => post.data.companies || []))];
const allModels = [...new Set(allPosts.flatMap((post) => post.data.models || []))];
const allTopics = [...new Set(allPosts.flatMap((post) => post.data.topics || []))];
const allPeople = [...new Set(allPosts.flatMap((post) => post.data.people || []))];

// Find posts with this tag
const posts = allPosts.filter((post) => 
  post.data.companies?.includes(id) || 
  post.data.models?.includes(id) || 
  post.data.topics?.includes(id) ||
  post.data.people?.includes(id)
);
// console.log("Posts filtered for tag:", posts.length);

// Get tag type
const tagType = getTagType(id, allCompanies, allModels, allTopics, allPeople);
// console.log("Tag type determined:", tagType);

// Sort posts by date, most recent first
const sortedPosts = posts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
);
---

<Layout title={`${tagType}: ${id}`} description={`Posts tagged with ${tagType.toLowerCase()}: ${id}`}>
  <Container>
    <div class="space-y-10" data-pagefind-ignore>
      <BackToPrevious href="/tags"> All tags </BackToPrevious>
      <h1 class="animate font-semibold text-black dark:text-white">
        {tagType}: "{id}"
      </h1>
      <ul class="animate flex flex-col gap-4">
        {sortedPosts.map((post) => <ArrowCard entry={post} />)}
      </ul>
    </div>
  </Container>
</Layout>
