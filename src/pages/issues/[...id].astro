---
import Layout from "@layouts/Layout.astro";
import { type CollectionEntry, getCollection, render } from "astro:content";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Giscus from "@components/Giscus.astro";
import Lightbox from "@components/Lightbox.astro";

export async function getStaticPaths() {
  console.log(`[Issue Detail] getStaticPaths - Environment: ${import.meta.env.MODE}`);
  const allIssuesRaw = await getCollection("issues");
  console.log(`[Issue Detail] Total raw issues: ${allIssuesRaw.length}`);
  
  // Log the years represented in all issues
  const yearsFound = new Set(allIssuesRaw.map(post => new Date(post.data.date).getFullYear()));
  console.log(`[Issue Detail] Years found in content: ${Array.from(yearsFound).sort().join(', ')}`);
  
  // Log 2025 issues data
  const issues2025 = allIssuesRaw.filter(post => new Date(post.data.date).getFullYear() === 2025);
  console.log(`[Issue Detail] Found ${issues2025.length} issues from 2025`);
  // issues2025.forEach(issue => {
  //   console.log(`[Issue Detail] 2025 issue: ${issue.id}, date: ${issue.data.date}, draft: ${issue.data.draft || false}`);
  // });

  const allIssues = allIssuesRaw
    .filter((post) => {
      const isDraft = !!post.data.draft;
      if (isDraft) {
        console.log(`[Issue Detail] Filtering out draft post: ${post.id}`);
      }
      return !isDraft;
    })
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  
  console.log(`[Issue Detail] Final filtered issues count: ${allIssues.length}`);
  
  // Log detailed path info
  const paths = allIssues.map((post) => ({
    params: { id: post.id },
    props: { post, year: new Date(post.data.date).getFullYear() },
  }));
  
  console.log(`[Issue Detail] Generated ${paths.length} paths`);
  console.log(`[Issue Detail] Sample path details:`, paths.slice(0, 2));
  
  // Count paths by year
  const pathsByYear = paths.reduce((acc: Record<number, number>, path) => {
    const year = path.props.year;
    acc[year] = (acc[year] || 0) + 1;
    return acc;
  }, {});
  
  console.log(`[Issue Detail] Paths by year:`, pathsByYear);
  
  return paths;
}

type Props = {
  post: CollectionEntry<"issues">;
  year: number;
};

const { post, year } = Astro.props;
console.log(`[Issue Detail] Rendering issue: ${post.id}, date: ${post.data.date}, year: ${year}`);

// To get the next and previous issues
// Get all issues
const posts = (await getCollection("issues"))
  .filter((p) => !p.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Find current issue index
const currentIndex = posts.findIndex((p) => p.id === post.id);
const prevPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
const nextPost = currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;

const { Content, headings } = await render(post);

// Extract issue number from ID
const issueNumber = post.id.split('-')[1] || '';

// Extract company and model tags if available
const companies = post.data.companies || [];
const models = post.data.models || [];

---

<Layout 
  title={post.data.title} 
  description={post.data.description || `AI News - Issue #${issueNumber}`}
  type="issue"
  issueNumber={issueNumber}
  date={post.data.date}
  companies={companies}
  models={models}
>
  <Container>
    <div class="animate flex justify-between items-center">
      <BackToPrevious href="/issues">Back to issues</BackToPrevious>
      <BackToPrevious href="#main-content" direction="down">Skip to Main</BackToPrevious>
    </div>
    
    <div class="flex flex-col-reverse lg:flex-row mx-auto max-w-7xl items-start gap-8 py-6">
      {/* Left column - matches TOC width */}
      <!-- <div class="order-2 w-full lg:order-1 lg:w-1/5 lg:sticky lg:top-8 lg:self-start">
        {/* Intentionally empty to align with TOC */}
      </div> -->
      
      {/* Right column - title and metadata */}
      <div role="banner" class="order-1 w-full lg:order-2 flex flex-col gap-4 lg:gap-24">
        <div class="animate flex items-center gap-1.5">
        </div>
        <h1 class="animate text-3xl font-semibold text-black dark:text-white break-words">
          
          <div class="font-base text-sm uppercase mono text-gray-400" data-pagefind-meta="date">
            <FormattedDate date={post.data.date} />
          </div> {post.data.title}
        </h1>
        {
          (post.data.companies && post.data.companies?.length > 0) || 
          (post.data.models && post.data.models?.length > 0) || 
          (post.data.topics && post.data.topics?.length > 0) || 
          (post.data.people && post.data.people?.length > 0) ? (
            <div class="animate space-y-3 pt-1 relative" aria-label="Article metadata" id="metadata-section">
              {/* Toggle Button */}
              <button 
                id="metadata-toggle" 
                aria-controls="metadata-content" 
                aria-expanded="true" 
                class="absolute top-0 right-1 p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none"
                title="Toggle metadata section"
              >
                <div class="flex items-center gap-1">
                  {/* Icon placeholder - we can add an SVG later if desired */}
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                  </svg>
                  <span class="" aria-hidden="true">show/hide tags</span>
                </div>
              </button>
              
              <div id="metadata-content">
                {post.data.companies && post.data.companies?.length > 0 ? (
                  <div>
                    <h3 class="text-xs uppercase text-gray-500 dark:text-gray-400 mb-1">Companies</h3>
                    <div class="flex flex-wrap gap-2" role="list" aria-label="Companies mentioned">
                      {post.data.companies.map((company) => (
                        <a
                          href={`/tags/${company}`}
                          data-pagefind-filter="company"
                          class="rounded-lg border border-black/10 bg-black/5 px-2 py-1 text-xs text-black hover:bg-black/10 dark:border-white/10 dark:bg-white/5 dark:text-white dark:hover:bg-white/10"
                          role="listitem"
                        >
                          {company}
                        </a>
                      ))}
                    </div>
                  </div>
                ) : null}
                
                {post.data.models && post.data.models?.length > 0 ? (
                  <div>
                    <h3 class="text-xs uppercase text-gray-500 dark:text-gray-400 mb-1">Models</h3>
                    <div class="flex flex-wrap gap-2" role="list" aria-label="AI models mentioned">
                      {post.data.models.map((model) => (
                        <a
                          href={`/tags/${model}`}
                          data-pagefind-filter="model"
                          class="rounded-lg border border-black/10 bg-black/5 px-2 py-1 text-xs text-black hover:bg-black/10 dark:border-white/10 dark:bg-white/5 dark:text-white dark:hover:bg-white/10"
                          role="listitem"
                        >
                          {model}
                        </a>
                      ))}
                    </div>
                  </div>
                ) : null}
                
                {post.data.topics && post.data.topics?.length > 0 ? (
                  <div>
                    <h3 class="text-xs uppercase text-gray-500 dark:text-gray-400 mb-1">Topics</h3>
                    <div class="flex flex-wrap gap-2" role="list" aria-label="Related topics">
                      {post.data.topics.map((topic) => (
                        <a
                          href={`/tags/${topic}`}
                          data-pagefind-filter="topic"
                          class="rounded-lg border border-black/10 bg-black/5 px-2 py-1 text-xs text-black hover:bg-black/10 dark:border-white/10 dark:bg-white/5 dark:text-white dark:hover:bg-white/10"
                          role="listitem"
                        >
                          {topic}
                        </a>
                      ))}
                    </div>
                  </div>
                ) : null}
                
                {post.data.people && post.data.people?.length > 0 ? (
                  <div>
                    <h3 class="text-xs uppercase text-gray-500 dark:text-gray-400 mb-1">People</h3>
                    <div class="flex flex-wrap gap-2" role="list" aria-label="People mentioned">
                      {post.data.people.map((person) => (
                        <a
                          href={`/tags/${person}`}
                          data-pagefind-filter="person"
                          class="rounded-lg border border-black/10 bg-black/5 px-2 py-1 text-xs text-black hover:bg-black/10 dark:border-white/10 dark:bg-white/5 dark:text-white dark:hover:bg-white/10"
                          role="listitem"
                        >
                          {person}
                        </a>
                      ))}
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ) : null
        }
      </div>
    </div>
    
    <div class="astro-entry border-t border-black/15 pt-8 dark:border-white/15 animate">
      <div class="mx-auto flex max-w-7xl flex-col items-start gap-8 lg:flex-row">
        {
          headings && headings.length > 0 && (
            <aside class="order-2 w-full lg:order-1 lg:top-8 lg:w-1/5 lg:sticky lg:self-start" role="complementary" aria-label="Table of contents">
              <TableOfContents headings={headings} />
            </aside>
          )
        }
        <main
          id="main-content"
          role="main"
          aria-label={`Issue #${issueNumber}: ${post.data.title}`}
          class={`pt-0 order-1 ${
            headings && headings.length > 0 ? "w-full lg:order-2 lg:w-4/5" : "w-full"
          }`}
        >
          <article class="content-area">
            <Content />
          </article>
          <nav class="mt-24" aria-label="Issue navigation">
            <PostNavigation prevPost={prevPost} nextPost={nextPost} />
          </nav>
          <section class="mt-24" aria-label="Comments">
            <Giscus />
          </section>
        </main>
      </div>
    </div>
  </Container>
  <Lightbox />
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const toggleButton = document.getElementById('metadata-toggle');
    const metadataContent = document.getElementById('metadata-content');
    const metadataSection = document.getElementById('metadata-section');
    const localStorageKey = 'metadataExpanded';

    if (!toggleButton || !metadataContent || !metadataSection) {
      console.log('Metadata toggle elements not found. Skipping toggle setup.');
      return;
    }

    console.log('Metadata toggle script running.');

    // Function to set visibility
    const setVisibility = (isExpanded: boolean) => {
      metadataContent.style.display = isExpanded ? '' : 'none';
      toggleButton.setAttribute('aria-expanded', String(isExpanded));
      // Rotate icon (optional)
      const icon = toggleButton.querySelector('svg');
      if (icon) {
        icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(-180deg)';
      }
      console.log(`Metadata section visibility set to: ${isExpanded ? 'expanded' : 'collapsed'}`);
    };

    // Initial state from localStorage
    let isExpanded = localStorage.getItem(localStorageKey) !== 'false'; // Default to true if not set or 'true'
    console.log(`Initial metadata state read from localStorage: ${isExpanded}`);
    setVisibility(isExpanded);

    // Add click listener
    toggleButton.addEventListener('click', () => {
      isExpanded = !isExpanded;
      setVisibility(isExpanded);
      localStorage.setItem(localStorageKey, String(isExpanded));
      console.log(`Metadata state toggled and saved to localStorage: ${isExpanded}`);
    });

    console.log('Metadata toggle event listener attached.');
  });
</script>

<style>
  /* Add custom styles for the content area */
  :global(.content-area) {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  @media (min-width: 640px) {
    :global(.content-area) {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  :global(.content-area blockquote) {
    border-left: 4px solid;
    border-color: rgba(0, 0, 0, 0.2);
    padding-left: 1rem;
    font-style: italic;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  :global(.dark .content-area blockquote) {
    border-color: rgba(255, 255, 255, 0.2);
  }
  
  :global(.content-area p) {
    line-height: 1.75;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  :global(.content-area h2) {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 3rem;
    margin-bottom: 1rem;
  }
  
  :global(.content-area h3) {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  :global(.content-area a) {
    text-decoration: underline;
    text-underline-offset: 3px;
    word-break: break-word;
  }
  
  :global(.content-area ul) {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  :global(.content-area ul li) {
    margin-top: 0.5rem;
  }
  
  :global(.content-area ol) {
    list-style-type: decimal;
    padding-left: 1.5rem;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  :global(.content-area ol li) {
    margin-top: 0.5rem;
  }
  
  :global(.content-area li) {
    padding-left: 0.5rem;
  }
  
  :global(.content-area pre) {
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  :global(.content-area code:not(pre code)) {
    background-color: rgba(0, 0, 0, 0.05);
    border-radius: 0.25rem;
    padding: 0.125rem 0.375rem;
  }
  
  :global(.dark .content-area code:not(pre code)) {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  :global(.content-area hr) {
    margin-top: 3rem;
    margin-bottom: 3rem;
    border-top: 1px solid;
    border-color: rgba(0, 0, 0, 0.15);
  }
  
  :global(.dark .content-area hr) {
    border-color: rgba(255, 255, 255, 0.2);
  }
  
  :global(.content-area img) {
    border-radius: 0.5rem;
    margin-top: 2rem;
    margin-bottom: 2rem;
    margin-left: auto;
    margin-right: auto;
    max-height: 300px;
    /* box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); */
  }
/*   
  :global(.dark .content-area img) {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.12);
  } */
</style>
