---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import FilterToggle from "@components/FilterToggle.astro";
import { ISSUES } from "@consts";

console.log(`[Issues Page] Environment: ${import.meta.env.MODE}`);

// Get all issues with logging
const allIssuesRaw = await getCollection("issues");
console.log(`[Issues Page] Total raw issues before filtering: ${allIssuesRaw.length}`);

// Log the years represented in the content
const yearsFound = new Set(allIssuesRaw.map(post => new Date(post.data.date).getFullYear()));
console.log(`[Issues Page] Years found in content: ${Array.from(yearsFound).sort().join(', ')}`);

// Count 2025 issues specifically
const issues2025Count = allIssuesRaw.filter(post => new Date(post.data.date).getFullYear() === 2025).length;
console.log(`[Issues Page] Number of 2025 issues: ${issues2025Count}`);

// Apply filtering
const data = allIssuesRaw
  .filter((post) => {
    const isDraft = !!post.data.draft;
    if (isDraft) {
      console.log(`[Issues Page] Filtering out draft post: ${post.id}`);
    }
    return !isDraft;
  })
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

console.log(`[Issues Page] Total issues after filtering: ${data.length}`);

// Group posts by year and month
type MonthlyPosts = {
  [month: string]: CollectionEntry<"issues">[];
};

type YearlyPosts = {
  [year: string]: {
    posts: CollectionEntry<"issues">[];
    months: MonthlyPosts;
  };
};

const posts = data.reduce((acc: YearlyPosts, post) => {
  const date = post.data.date;
  const year = date.getFullYear().toString();
  const month = date.toLocaleString('en-US', { month: 'long' });
  
  // Initialize year if it doesn't exist
  if (!acc[year]) {
    acc[year] = {
      posts: [],
      months: {}
    };
  }
  
  // Initialize month if it doesn't exist
  if (!acc[year].months[month]) {
    acc[year].months[month] = [];
  }
  
  // Add post to both year and month collections
  acc[year].posts.push(post);
  acc[year].months[month].push(post);
  
  return acc;
}, {});

// Sort years and months
const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a));

// Get months in order (for sidebar navigation)
const monthOrder = [
  'January', 'February', 'March', 'April', 'May', 'June', 
  'July', 'August', 'September', 'October', 'November', 'December'
];

// Log the distribution of posts by year and month
Object.entries(posts).forEach(([year, yearData]) => {
  console.log(`[Issues Page] Year ${year}: ${yearData.posts.length} posts`);
  Object.entries(yearData.months).forEach(([month, monthPosts]) => {
    console.log(`[Issues Page] Year ${year}, Month ${month}: ${monthPosts.length} posts`);
  });
});
---

<Layout title={ISSUES.TITLE} description={ISSUES.DESCRIPTION}>
  <Container>
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Sidebar navigation (hidden on mobile) -->
      <aside class="hidden lg:block w-64 sticky top-24 self-start">
        <nav class="bg-white dark:bg-neutral-900 p-4 rounded-lg border border-black/15 dark:border-white/20 max-h-[calc(100vh-120px)] overflow-y-auto">
          <h2 class="text-lg font-semibold mb-4">Quick Navigation</h2>
          <ul class="space-y-2">
            {years.map((year) => (
              <li>
                <a href={`#year-${year}`} class="font-medium hover:underline text-black/80 dark:text-white/80 hover:text-black dark:hover:text-white">{year}</a>
                <ul class="ml-4 space-y-1 mt-1">
                  {monthOrder
                    .filter((month) => posts[year].months[month]?.length > 0)
                    .reverse()
                    .map((month) => (
                      <li>
                        <a href={`#${year}-${month}`} class="text-sm hover:underline text-black/60 dark:text-white/60 hover:text-black dark:hover:text-white">
                          {month} ({posts[year].months[month].length})
                        </a>
                      </li>
                    ))}
                </ul>
              </li>
            ))}
          </ul>
        </nav>
      </aside>

      <!-- Main content -->
      <div class="flex-1 space-y-10">
        {years.map((year) => (
          <section id={`year-${year}`} class="animate space-y-6 scroll-mt-24">
            <h2 class="text-2xl font-semibold text-black dark:text-white flex justify-between items-center">{year}
              <FilterToggle id="filter-quiet-days" label="Hide 'not much happened today' posts" />
            </h2>
            
            {monthOrder
              .filter((month) => posts[year].months[month]?.length > 0)
              .reverse()
              .map((month) => (
                <div id={`${year}-${month}`} class="space-y-4 scroll-mt-24">
                  <h3 class="text-xl font-medium text-black/80 dark:text-white/80">{month}</h3>
                  <ul class="not-prose flex flex-col gap-4">
                    {posts[year].months[month].map((post) => (
                      <li data-post-title={post.data.title.toLowerCase()}>
                        <ArrowCard entry={post} />
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
          </section>
        ))}
      </div>
    </div>
  </Container>
</Layout>

<script>
  let filterQuietDays = false;

  function applyFilters() {
    const items = document.querySelectorAll('li[data-post-title]');
    
    items.forEach(item => {
      const postTitle = item.getAttribute('data-post-title') || '';
      const shouldHide = filterQuietDays && postTitle.includes('not much happened today');
      
      if (shouldHide) {
        item.classList.add('hidden');
      } else {
        item.classList.remove('hidden');
      }
    });
  }

  function initFilterToggle() {
    // Load initial filter state from localStorage
    const savedFilterState = localStorage.getItem('filter_filter-quiet-days');
    filterQuietDays = savedFilterState === 'true';
    
    document.addEventListener('filter-toggle-change', (event: any) => {
      if (event.detail.id === 'filter-quiet-days') {
        filterQuietDays = event.detail.checked;
        applyFilters();
      }
    });
    
    // Apply initial filtering
    if (filterQuietDays) {
      applyFilters();
    }
  }

  // Initialize on page load
  initFilterToggle();
  
  // Re-initialize when navigating with View Transitions
  document.addEventListener('astro:page-load', () => {
    initFilterToggle();
  });
</script>
