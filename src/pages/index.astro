---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import { SITE, HOME, SOCIALS } from "@consts";
import ArrowCard from "@components/ArrowCard.astro";
import Link from "@components/Link.astro";
import RegexFilter from "@components/RegexFilter.astro";
import { getCollection } from "astro:content";
import SubscribeForm from "@components/SubscribeForm.astro";

// Add logging to see what's happening with content
console.log(`[Build Info] Environment: ${import.meta.env.MODE}`);

// Constants for pagination
const ITEMS_PER_PAGE = 30;

// Get all issues first but only fetch essential metadata, not content
const allIssuesRaw = await getCollection("issues", ({ data }) => {
  // Only fetch the data we need for the listing page
  return {
    id: true,
    data: {
      title: true,
      date: true, 
      tags: true,
      models: true,
      companies: true,
      topics: true,
      description: true,
      draft: true
    }
  };
});
console.log(`[Content Log] Total raw issues before filtering: ${allIssuesRaw.length}`);

// Apply filtering
let allIssues = allIssuesRaw
  .filter((post) => {
    const isDraft = !!post.data.draft;
    if (isDraft) {
      console.log(`[Content Log] Filtered out draft post: ${post.id}`);
    }
    return !isDraft;
  })
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

console.log(`[Content Log] Total issues after filtering: ${allIssues.length}`);

// Only keep the first page of issues for initial render
const initialIssues = allIssues.slice(0, ITEMS_PER_PAGE);
---

<Layout 
  title={HOME.TITLE} 
  description={HOME.DESCRIPTION}
  type="homepage"
>
  <Container>
    <aside data-pagefind-ignore>
      <h1 class="font-semibold text-black dark:text-white text-8xl mb-8">
        AINews <span class="text-sm text-zinc-600 dark:text-zinc-400">by smol.ai</span>
      </h1>
      <div class="space-y-16">
        <div class="lg:flex gap-8">
          <section class="flex-1 flex flex-col place-content-center animate space-y-4">
            <!-- <h2 class="font-semibold text-black dark:text-white">
              Subscribe to Updates
            </h2> -->
            <article>
              <p class="mb-4">How over 50k top AI Engineers keep up, every weekday.</p>
              <div class="max-w-md">
                <SubscribeForm compact={true} />
              </div>
              <p class="mt-3 text-xs text-zinc-600 dark:text-zinc-400">
                We respect your privacy. <Link href="/subscribe">Full signup link here.</Link>
              </p>
            </article>
          </section>
          <section class="flex-1">
            <article class="space-y-4">
              <div>
                <p>We summarize top AI discords + AI reddits + AI X/Twitters, and send you a roundup each day!
                  <!-- See <Link href="https://buttondown.email/ainews/archive/" external>archive</Link> for examples. -->
                 </p>
                <blockquote>
                  <p>"Highest-leverage 45 mins I spend everyday" - <Link href="https://twitter.com/soumithchintala/status/1764853209498034537" external>Soumith</Link> </p>
                </blockquote>
                <blockquote>
                  <p>"<Link href="https://twitter.com/karpathy/status/1767616494752731633" external>best AI newsletter atm</Link>" and "<Link href="https://x.com/karpathy/status/1857126049357914266" external>I'm not sure that enough people subscribe</Link>" - Andrej </p>
                </blockquote>
                <blockquote>
                  <p>"genuinely incredible" - <Link href="https://x.com/chrisalbon/status/1768433442210091170?s=20" external>Chris</Link> </p>
                </blockquote>
                <blockquote>
                  <p>"surprisingly decent" - <Link href="https://x.com/HamelHusain/status/1798527078389993674" external>Hamel</Link> </p>
                </blockquote>
                <!-- <p>A smol service by @swyx and other <Link href="https://www.smol.ai/" external>Smol.AI</Link> friends! </p> -->
                <p><em>You can pay for a <Link href="https://www.loom.com/share/34b37822c6784989bafd6fcc5fee6420?sid=75bf3b4c-61b5-46fd-a2b1-7c7fe911df89" external>customizable version here</Link>. Thanks to <Link href="https://x.com/swyx/status/1826349521041064012" external>Pieter Levels for the Lex Fridman feature!</Link></em></p>
              </div>
            </article>
          </section>

        </div>

        <section class="animate space-y-6">
          <div class="flex flex-wrap items-center justify-between gap-y-2">
            <h2 class="font-semibold text-black dark:text-white">
              Last 30 days in AI
            </h2>
            <RegexFilter id="regex-filter-posts" label="Filter titles:" showFields={false} />
            <Link href="/issues"> See all issues </Link>
          </div>
          
          
          <div class="relative">
            <div class="absolute left-4 top-0 bottom-0 w-px bg-black/10 dark:bg-white/10 md:block hidden"></div>
            <ul class="not-prose flex flex-col gap-4 relative" id="timeline">
              {
                initialIssues.map((post) => (
                  <li 
                    class="relative md:pl-10" 
                    data-post-title={post.data.title.toLowerCase()}
                    data-post-description={post.data.description?.toLowerCase() || ""}
                    data-post-models={post.data.models ? post.data.models.join(",").toLowerCase() : ""}
                    data-post-companies={post.data.companies ? post.data.companies.join(",").toLowerCase() : ""}
                    data-post-topics={post.data.topics ? post.data.topics.join(",").toLowerCase() : ""}
                    data-post-all-tags={[
                      ...(post.data.models || []), 
                      ...(post.data.companies || []), 
                      ...(post.data.topics || [])
                    ].join(",").toLowerCase()}
                    data-post-id={post.id}
                    data-post-date={post.data.date.toISOString()}
                  >
                    <div class="absolute left-[0.8rem] top-[40%] w-2 h-2 rounded-full bg-black/50 dark:bg-white/50 md:block hidden"></div>
                    <ArrowCard entry={post} />
                  </li>
                ))
              }
            </ul>
            <div class="mt-8 flex justify-center">
              <a
                href="/issues"
                class="rounded-lg border-2 border-black/20 px-4 py-2 font-medium transition-colors hover:bg-black/5 dark:border-white/30 dark:hover:bg-white/5"
              >
                See all issues
              </a>
            </div>
          </div>
        </section>

        <section class="animate space-y-4">
          <h2 class="font-semibold text-black dark:text-white">
            Let's Connect
          </h2>
          <article>
            <p>
              If you want to get in touch with me about something or just to say
              hi, reach out on social media or send me an email.
            </p>
          </article>
          <ul class="not-prose flex flex-wrap gap-2">
            {
              SOCIALS.map((SOCIAL) => (
                <li class="flex gap-x-2 text-nowrap">
                  <Link
                    href={SOCIAL.HREF}
                    external
                    aria-label={`${SITE.TITLE} on ${SOCIAL.NAME}`}
                  >
                    {SOCIAL.NAME}
                  </Link>
                  {"/"}
                </li>
              ))
            }
            <li class="line-clamp-1">
              <Link
                href={`mailto:${SITE.EMAIL}`}
                aria-label={`Email ${SITE.TITLE}`}
              >
                {SITE.EMAIL}
              </Link>
            </li>
          </ul>
        </section>
      </div>
    </aside>
  </Container>
</Layout>

<script>
  let filterPattern = '';
  let isValidPattern = true;
  let filterFields = {
    title: true,
    description: false,
    tags: false
  };

  function updateIssuesLinks() {
    // Get all "See all issues" links
    // match a href /issues with arbitrary query params after that, but not if they have other slugs after, eg /issues/foobar
    const issuesLinks = document.querySelectorAll('a[href^="/issues"][href$="/issues"], a[href^="/issues?"]');
    
    // Build query string from current filter state
    const params = new URLSearchParams();
    if (filterPattern && isValidPattern) {
      params.set('pattern', encodeURIComponent(filterPattern));
      
      if (!filterFields.title) {
        params.set('filterTitle', 'false');
      }
      
      if (filterFields.description) {
        params.set('filterDesc', 'true');
      }
      
      if (filterFields.tags) {
        params.set('filterTags', 'true');
      }
    }
    
    const queryString = params.toString();
    const newHref = queryString ? `/issues?${queryString}` : '/issues';
    
    // Update all links
    issuesLinks.forEach(link => {
      link.setAttribute('href', newHref);
      link.textContent = `See all ${queryString} issues`
    });
  }

  function applyFilters() {
    const items = document.querySelectorAll('#timeline li');
    
    // If no pattern or invalid pattern, show all items
    if (!filterPattern.trim() || !isValidPattern) {
      items.forEach(item => {
        item.classList.remove('hidden');
      });
      updateIssuesLinks(); // Update links when clearing filter
      return;
    }

    try {
      // Create a RegExp object from the pattern
      const regex = new RegExp(filterPattern, 'i');
      
      items.forEach(item => {
        let shouldShow = false;
        
        // Check title if enabled
        if (filterFields.title) {
          const postTitle = item.getAttribute('data-post-title') || '';
          if (regex.test(postTitle)) {
            shouldShow = true;
          }
        }
        
        // Check description if enabled
        if (!shouldShow && filterFields.description) {
          const postDescription = item.getAttribute('data-post-description') || '';
          if (regex.test(postDescription)) {
            shouldShow = true;
          }
        }
        
        // Check all tags if enabled - this includes models, companies, topics
        if (!shouldShow && filterFields.tags) {
          const postAllTags = item.getAttribute('data-post-all-tags') || '';
          console.log({postAllTags})
          if (regex.test(postAllTags)) {
            shouldShow = true;
          }
        }
        
        if (shouldShow) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
      
      // Update the "See all issues" links with current filter
      updateIssuesLinks();
    } catch (error) {
      console.warn('Invalid regex pattern:', error);
      items.forEach(item => {
        item.classList.remove('hidden');
      });
    }
  }

  function initRegexFilter() {
    // Load initial filter state from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const paramPattern = urlParams.get('pattern');
    const paramTitle = urlParams.get('filterTitle');
    const paramDesc = urlParams.get('filterDesc');
    const paramTags = urlParams.get('filterTags');
    
    if (paramPattern) {
      filterPattern = decodeURIComponent(paramPattern);
      try {
        new RegExp(filterPattern);
        isValidPattern = true;
      } catch (error) {
        isValidPattern = false;
      }
    }
    
    // Set filter fields from URL params
    filterFields = {
      title: paramTitle !== 'false', // Default to true if not explicitly set to false
      description: paramDesc === 'true',
      tags: paramTags === 'true'
    };
    
    document.addEventListener('regex-filter-change', (event: any) => {
      if (event.detail.id === 'regex-filter-posts') {
        filterPattern = event.detail.pattern;
        isValidPattern = event.detail.isValid;
        
        // Update filter fields if they exist in the event
        if (event.detail.fields) {
          filterFields = event.detail.fields;
        }
        
        // Apply filters immediately
        applyFilters();
        
        // Log filter state for debugging
        console.log('Filter applied:', {
          pattern: filterPattern,
          isValid: isValidPattern,
          fields: filterFields
        });
      }
    });
    
    // Apply initial filtering and update links
    applyFilters();
    updateIssuesLinks();
  }

  // Initialize on page load
  initRegexFilter();
  
  // Re-initialize when navigating with View Transitions
  document.addEventListener('astro:page-load', () => {
    initRegexFilter();
  });
</script>
