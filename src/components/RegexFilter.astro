---
interface Props {
  id: string;
  placeholder?: string;
  label: string;
  showFields?: boolean;
  extraClasses?: string;
}

const { 
  id, 
  placeholder = "^((?!not much).)*$",
  label,
  showFields = true,
  extraClasses = ''
} = Astro.props;
---

<div class={"inline-flex items-center gap-2 mt-4 mb-4 flex-wrap " + extraClasses} data-show-fields={showFields.toString()}>
  <label for={id} class="font-medium text-sm text-gray-700 dark:text-gray-300">
    {label}
  </label>
  <div class="relative">
    <input
      type="text"
      id={id}
      placeholder={placeholder}
      aria-label={label}
      class="regex-filter-input rounded border border-gray-300 dark:border-gray-700 px-2 py-1 text-sm bg-white dark:bg-gray-800 text-black dark:text-white focus:outline-none focus:ring-2 focus:ring-black/20 dark:focus:ring-white/20 min-w-48"
    />
    <span id={`${id}-error`} class="hidden absolute -bottom-5 right-0 text-xs text-red-500">Invalid regex</span>
  </div>
  {showFields && (
    <div class="flex gap-2 items-center text-sm ml-1">
      <label class="inline-flex items-center cursor-pointer">
        <input type="checkbox" id={`${id}-title`} class="sr-only peer" checked />
        <div class="relative w-8 h-4 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-3 after:w-3 after:transition-all dark:border-gray-600 peer-checked:bg-black dark:peer-checked:bg-blue-500"></div>
        <span class="ms-1">Title</span>
      </label>
      <label class="inline-flex items-center cursor-pointer">
        <input type="checkbox" id={`${id}-description`} class="sr-only peer" />
        <div class="relative w-8 h-4 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-3 after:w-3 after:transition-all dark:border-gray-600 peer-checked:bg-black dark:peer-checked:bg-blue-500"></div>
        <span class="ms-1">Desc</span>
      </label>
      <label class="inline-flex items-center cursor-pointer">
        <input type="checkbox" id={`${id}-tags`} class="sr-only peer" />
        <div class="relative w-8 h-4 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-3 after:w-3 after:transition-all dark:border-gray-600 peer-checked:bg-black dark:peer-checked:bg-blue-500"></div>
        <span class="ms-1">Tags</span>
      </label>
    </div>
  )}
</div>

<script>
  function setupRegexFilter() {
    const filters = document.querySelectorAll('input[id^="regex-filter-"]:not([type="checkbox"])');
    
    // Helper to update URL params without creating new history entries
    function updateURLParams(params: URLSearchParams) {
      const newUrl = `${window.location.pathname}?${params.toString()}${window.location.hash}`;
      console.log(`Updating URL to: ${newUrl}`);
      window.history.replaceState(null, '', newUrl);
    }
    
    // Helper to get URLSearchParams
    function getURLParams() {
      return new URLSearchParams(window.location.search);
    }
    
    filters.forEach((filter) => {
      const filterId = filter.id;
      console.log(`Setting up filter: ${filterId}`);
      const errorElement = document.getElementById(`${filterId}-error`);
      const titleCheckbox = document.getElementById(`${filterId}-title`) as HTMLInputElement;
      const descriptionCheckbox = document.getElementById(`${filterId}-description`) as HTMLInputElement;
      const tagsCheckbox = document.getElementById(`${filterId}-tags`) as HTMLInputElement;
      
      // Get showFields value from data attribute
      const filterContainer = filter.closest('[data-show-fields]');
      const showFields = filterContainer?.getAttribute('data-show-fields') === 'true';
      
      // Initialize isValid flag  
      let isValid = true;
      
      // Read filter state from URL query parameters - using clearer names
      const urlParams = getURLParams();
      const paramPattern = urlParams.get('pattern');
      const paramTitle = urlParams.get('filterTitle');
      const paramDesc = urlParams.get('filterDesc');
      const paramTags = urlParams.get('filterTags');
      
      console.log(`Reading URL params for ${filterId}:`, {
        pattern: paramPattern,
        title: paramTitle,
        description: paramDesc,
        tags: paramTags,
        showFields
      });
      
      // Set initial input value from URL params
      if (paramPattern) {
        try {
          const decodedPattern = decodeURIComponent(paramPattern);
          console.log(`Setting initial pattern: ${decodedPattern}`);
          (filter as HTMLInputElement).value = decodedPattern;
          
          // Validate the pattern
          new RegExp(decodedPattern);
          errorElement?.classList.add('hidden');
        } catch (error) {
          console.error(`Invalid regex pattern in URL: ${paramPattern}`, error);
          errorElement?.classList.remove('hidden');
          isValid = false;
        }
      }
      
      // Set initial checkbox states from URL params
      const fields = {
        // If showFields is false, title is always on regardless of URL param
        title: showFields ? (paramTitle !== 'false') : true,
        description: paramDesc === 'true',
        tags: paramTags === 'true'
      };
      
      console.log(`Initial field states:`, fields);
      
      if (titleCheckbox) {
        titleCheckbox.checked = fields.title;
      }
      
      if (descriptionCheckbox) {
        descriptionCheckbox.checked = fields.description;
      }
      
      if (tagsCheckbox) {
        tagsCheckbox.checked = fields.tags;
      }
      
      // Helper to update URL with current filter state
      function updateFilterInURL(pattern: string, fields: {title: boolean, description: boolean, tags: boolean}) {
        const params = getURLParams();
        
        // Always update pattern regardless of showFields
        if (pattern) {
          params.set('pattern', encodeURIComponent(pattern));
        } else {
          params.delete('pattern');
        }
        
        // Only update field-related params if showFields is true
        if (showFields) {
          // Only store false for title (since true is default)
          if (!fields.title) {
            params.set('filterTitle', 'false');
          } else {
            params.delete('filterTitle');
          }
          
          if (fields.description) {
            params.set('filterDesc', 'true');
          } else {
            params.delete('filterDesc');
          }
          
          if (fields.tags) {
            params.set('filterTags', 'true');
          } else {
            params.delete('filterTags');
          }
        }
        
        console.log(`Updating params for ${filterId}:`, {
          pattern,
          fields,
          params: params.toString()
        });
        
        // Update URL without creating a new history entry
        updateURLParams(params);
      }
      
      // Setup checkbox change listeners
      [titleCheckbox, descriptionCheckbox, tagsCheckbox].forEach(checkbox => {
        if (!checkbox) return;
        
        checkbox.addEventListener('change', () => {
          const fields = {
            // If showFields is false, title is always considered on for filtering
            title: showFields ? (titleCheckbox?.checked || false) : true,
            description: descriptionCheckbox?.checked || false,
            tags: tagsCheckbox?.checked || false
          };
          
          console.log(`Checkbox changed for ${filterId}:`, fields);
          
          // Get current pattern from input
          const pattern = (filter as HTMLInputElement).value;
          
          // Update URL params
          updateFilterInURL(pattern, fields);
          
          // Dispatch filter change event with updated fields
          dispatchFilterChangeEvent(filterId, pattern, true, fields);
        });
      });
      
      // Initial dispatch if we have params or checkboxes are set
      if (paramPattern || fields.title || fields.description || fields.tags) {
        // Use setTimeout to ensure DOM is ready
        setTimeout(() => {
          console.log(`Initial dispatch for ${filterId}`);
          dispatchFilterChangeEvent(
            filterId, 
            paramPattern ? decodeURIComponent(paramPattern) : '', 
            isValid, 
            fields
          );
        }, 0);
      }
      
      // Add input handler with debounce
      let debounceTimer: number;
      filter.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
          const pattern = (filter as HTMLInputElement).value;
          let isValid = true;
          
          console.log(`Input changed for ${filterId}: ${pattern}`);
          
          // Validate regex pattern
          try {
            if (pattern) new RegExp(pattern);
            errorElement?.classList.add('hidden');
          } catch (error) {
            console.error(`Invalid regex: ${pattern}`, error);
            errorElement?.classList.remove('hidden');
            isValid = false;
          }
          
          // Update URL params
          if (isValid) {
            updateFilterInURL(pattern, {
              // If showFields is false, title is always considered on for filtering
              title: showFields ? (titleCheckbox?.checked || false) : true,
              description: descriptionCheckbox?.checked || false,
              tags: tagsCheckbox?.checked || false
            });
          }
          
          // Dispatch filter change event
          dispatchFilterChangeEvent(
            filterId, 
            pattern, 
            isValid, 
            {
              // If showFields is false, title is always considered on for filtering
              title: showFields ? (titleCheckbox?.checked || false) : true,
              description: descriptionCheckbox?.checked || false,
              tags: tagsCheckbox?.checked || false
            }
          );
        }, 300) as unknown as number;
      });

      // Make sure input changes are captured immediately
      filter.addEventListener('keyup', (e) => {
        // Handle Enter key press immediately
        if ((e as KeyboardEvent).key === 'Enter') {
          console.log(`Enter pressed for ${filterId}`);
          const pattern = (filter as HTMLInputElement).value;
          let isValid = true;
          
          try {
            if (pattern) new RegExp(pattern);
            errorElement?.classList.add('hidden');
          } catch (error) {
            console.error(`Invalid regex on Enter: ${pattern}`, error);
            errorElement?.classList.remove('hidden');
            isValid = false;
          }
          
          // Update URL params if valid
          if (isValid) {
            updateFilterInURL(pattern, {
              // If showFields is false, title is always considered on for filtering
              title: showFields ? (titleCheckbox?.checked || false) : true,
              description: descriptionCheckbox?.checked || false,
              tags: tagsCheckbox?.checked || false
            });
          }
          
          // Get field values
          const fields = {
            // If showFields is false, title is always considered on for filtering
            title: showFields ? (titleCheckbox?.checked || false) : true,
            description: descriptionCheckbox?.checked || false,
            tags: tagsCheckbox?.checked || false
          };
          
          // Dispatch filter change event
          dispatchFilterChangeEvent(filterId, pattern, isValid, fields);
        }
      });
    });
  }
  
  function dispatchFilterChangeEvent(
    id: string, 
    pattern: string, 
    isValid: boolean, 
    fields: {title: boolean, description: boolean, tags: boolean}
  ) {
    console.log(`Dispatching filter change event:`, { id, pattern, isValid, fields });
    const event = new CustomEvent('regex-filter-change', { 
      detail: { id, pattern, isValid, fields }
    });
    document.dispatchEvent(event);
  }

  // Initialize on page load
  setupRegexFilter();

  // Re-initialize when navigating with View Transitions
  document.addEventListener('astro:page-load', setupRegexFilter);
</script> 