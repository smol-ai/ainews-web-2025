---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@components/FormattedDate.astro";

type Props = {
  entry: CollectionEntry<"issues"> | CollectionEntry<"projects">;
};

const { entry } = Astro.props as {
  entry: CollectionEntry<"issues"> | CollectionEntry<"projects">;
};

// Type guard to check if entry is an issue
const isIssue = (entry: Props["entry"]): entry is CollectionEntry<"issues"> => {
  return entry.collection === "issues";
};
---

<div class="group relative arrow-card">
  <a
    href={`/${entry.collection}/${entry.id}`}
    class="block rounded-lg border border-black/15 px-4 py-3 transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"
    tabindex="0"
  >
    <div class="flex items-center gap-4">
      <div class="min-w-24 text-sm text-gray-500 dark:text-gray-400">
        <FormattedDate date={entry.data.date} />
      </div>
      <div class="font-semibold">
        {entry.data.title}
      </div>
    </div>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="absolute top-1/2 right-2 size-5 -translate-y-1/2 fill-none stroke-current stroke-2"
    >
      <line
        x1="5"
        y1="12"
        x2="19"
        y2="12"
        class="translate-x-3 scale-x-0 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-hover:scale-x-100 group-focus-visible:translate-x-0 group-focus-visible:scale-x-100 group-focus-within:translate-x-0 group-focus-within:scale-x-100"
      ></line>
      <polyline
        points="12 5 19 12 12 19"
        class="-translate-x-1 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-focus-visible:translate-x-0 group-focus-within:translate-x-0"
      ></polyline>
    </svg>
    
    <button 
      type="button" 
      class="sr-only toggle-details"
      aria-label="Show details"
      tabindex="0"
    >
      Show details
    </button>
  </a>

  <div
    class="card-details absolute top-[calc(100%+0.5rem)] right-0 left-0 z-10 hidden translate-y-2 rounded-lg border-2 border-black/20 bg-white p-4 opacity-0 shadow-xl transition-all duration-200 ease-out group-hover:block group-hover:translate-y-0 group-hover:opacity-100 group-focus-within:block group-focus-within:translate-y-0 group-focus-within:opacity-100 dark:border-white/30 dark:bg-neutral-800 dark:shadow-2xl dark:shadow-black/50"
  >
    <div
      class="absolute -top-2 left-6 h-4 w-4 rotate-45 border-t-2 border-l-2 border-black/20 bg-white dark:border-white/30 dark:bg-neutral-800"
    >
    </div>
    <button 
      type="button"
      class="close-details absolute top-2 right-2 size-6 flex items-center justify-center rounded-full bg-black/5 text-black/70 hover:bg-black/10 dark:bg-white/10 dark:text-white/70 dark:hover:bg-white/20"
      aria-label="Close details"
      tabindex="0"
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="size-4 fill-none stroke-current stroke-2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="text-sm leading-relaxed flex-col space-y-4">
      {/* Models tags - blue color */}
      {
        isIssue(entry) && (entry.data.models?.length || 0) > 0 && (
          <div class="mt-1 inline-flex flex-wrap gap-1">
            {(entry.data.models || []).map((tag: string) => (
              <span class="rounded-sm border border-blue-300 bg-blue-50 px-1.5 py-0.5 text-xs text-blue-800 dark:border-blue-800 dark:bg-blue-900/30 dark:text-blue-300">
                {tag}
              </span>
            ))}
            {isIssue(entry) && (entry.data.companies?.length || 0) > 0 && (entry.data.companies || []).map((tag: string) => (
              <span class="rounded-sm border border-purple-300 bg-purple-50 px-1.5 py-0.5 text-xs text-purple-800 dark:border-purple-800 dark:bg-purple-900/30 dark:text-purple-300">
                {tag}
              </span>
            ))}
            {isIssue(entry) && (entry.data.topics?.length || 0) > 0 && (entry.data.topics || []).map((tag: string) => (
              <span class="rounded-sm border border-green-300 bg-green-50 px-1.5 py-0.5 text-xs text-green-800 dark:border-green-800 dark:bg-green-900/30 dark:text-green-300">
                {tag}
              </span>
            ))}
          </div>
        )
      }
      
      {/* For backward compatibility */}
      {
        isIssue(entry) && entry.data.tags && entry.data.tags.length > 0 && (
          <div class="mt-1 flex flex-wrap gap-1">
            {entry.data.tags.map((tag: string) => (
              <span class="rounded-sm border border-black/15 px-1.5 py-0.5 text-xs dark:border-white/20">
                {tag}
              </span>
            ))}
          </div>
        )
      }
      <div>
        {entry.data.description}
      </div>
    </div>
  </div>
</div>

<script>
  // Add support for touch events on mobile
  document.addEventListener('DOMContentLoaded', () => {
    // Only run this script on mobile/touch devices
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    if (isTouchDevice) {
      const cards = document.querySelectorAll<HTMLElement>('.arrow-card');
      
      cards.forEach(card => {
        // Handle tap on mobile (which doesn't trigger hover)
        card.addEventListener('touchstart', (e: TouchEvent) => {
          // Only handle taps on the card itself, not the popup
          const target = e.target as HTMLElement;
          if (!target.closest('.card-details')) {
            // Prevent default to avoid immediate navigation
            e.preventDefault();
            
            // Toggle active class on the card
            card.classList.toggle('touch-active');
            
            // Find the details element within this card
            const details = card.querySelector<HTMLElement>('.card-details');
            
            // If the card is active, show the details
            if (details && card.classList.contains('touch-active')) {
              details.style.display = 'block';
              details.style.opacity = '1';
              details.style.transform = 'translateY(0)';
            } else if (details) {
              // If we're toggling off, hide the details
              details.style.display = '';
              details.style.opacity = '';
              details.style.transform = '';
            }
          }
        }, { passive: false });
        
        // Handle close button clicks
        const closeButton = card.querySelector<HTMLElement>('.close-details');
        if (closeButton) {
          closeButton.addEventListener('click', (e: MouseEvent) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Remove active class from the card
            card.classList.remove('touch-active');
            
            // Hide the details
            const details = card.querySelector<HTMLElement>('.card-details');
            if (details) {
              details.style.display = '';
              details.style.opacity = '';
              details.style.transform = '';
            }
          });
        }
      });
      
      // Hide all popups when tapping elsewhere on the page
      document.addEventListener('touchstart', (e: TouchEvent) => {
        // If the tap is not on a card or its details
        const target = e.target as HTMLElement;
        if (!target.closest('.arrow-card')) {
          // Hide all active cards
          document.querySelectorAll<HTMLElement>('.arrow-card.touch-active').forEach(card => {
            card.classList.remove('touch-active');
            const details = card.querySelector<HTMLElement>('.card-details');
            if (details) {
              details.style.display = '';
              details.style.opacity = '';
              details.style.transform = '';
            }
          });
        }
      }, { passive: true });
    }
  });
</script>
