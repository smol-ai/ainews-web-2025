---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@components/FormattedDate.astro";
import { markdownToHtml } from "../utils/textUtils";

type Props = {
  entry: CollectionEntry<"issues"> | CollectionEntry<"projects">;
};

const { entry } = Astro.props as {
  entry: CollectionEntry<"issues"> | CollectionEntry<"projects">;
};

// Type guard to check if entry is an issue
const isIssue = (entry: Props["entry"]): entry is CollectionEntry<"issues"> => {
  return entry.collection === "issues";
};

---

<div class="group relative arrow-card">
  <a
    href={`/${entry.collection}/${entry.id}`}
    class="block rounded-lg border border-black/15 px-4 py-3 transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"
    tabindex="0"
  >
    <div class="flex items-center gap-4">
      <div class="min-w-24 text-sm text-gray-500 dark:text-gray-400">
        <FormattedDate date={entry.data.date} />
      </div>
      <div class="font-semibold">
        {entry.data.title}
      </div>
    </div>

    {/* Wrap SVG in a span for easier event targeting */}
    <span class="details-touch-toggle absolute top-1/2 right-2 -translate-y-1/2">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="size-5 fill-none stroke-current stroke-2"
      >
        <line
          x1="5"
          y1="12"
          x2="19"
          y2="12"
          class="translate-x-3 scale-x-0 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-hover:scale-x-100 group-focus-visible:translate-x-0 group-focus-visible:scale-x-100 group-focus-within:translate-x-0 group-focus-within:scale-x-100"
        ></line>
        <polyline
          points="12 5 19 12 12 19"
          class="-translate-x-1 transition-transform duration-300 ease-in-out group-hover:translate-x-0 group-focus-visible:translate-x-0 group-focus-within:translate-x-0"
        ></polyline>
      </svg>
    </span>
    
    <button 
      type="button" 
      class="sr-only toggle-details"
      aria-label="Show details"
      tabindex="0"
    >
      Show details
    </button>
  </a>

  <div
    class="card-details absolute top-[calc(100%+0.5rem)] right-0 left-0 z-10 hidden translate-y-2 rounded-lg border-2 border-black/20 bg-white p-4 opacity-0 shadow-xl transition-all duration-200 ease-out group-hover:block group-hover:translate-y-0 group-hover:opacity-100 group-focus-within:block group-focus-within:translate-y-0 group-focus-within:opacity-100 dark:border-white/30 dark:bg-neutral-800 dark:shadow-2xl dark:shadow-black/50"
  >
    <div
      class="absolute -top-2 left-6 h-4 w-4 rotate-45 border-t-2 border-l-2 border-black/20 bg-white dark:border-white/30 dark:bg-neutral-800"
    >
    </div>
    <button 
      type="button"
      class="close-details absolute top-2 right-2 size-6 flex items-center justify-center rounded-full bg-black/5 text-black/70 hover:bg-black/10 dark:bg-white/10 dark:text-white/70 dark:hover:bg-white/20 p-2 -m-2"
      aria-label="Close details"
      tabindex="0"
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="size-4 fill-none stroke-current stroke-2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="text-sm leading-relaxed flex-col space-y-4">
      {/* Models tags - blue color */}
      {
        isIssue(entry) && (entry.data.models?.length || 0) > 0 && (
          <div class="mt-1 inline-flex flex-wrap gap-1">
            {(entry.data.models || []).map((tag: string) => (
              <span class="rounded-sm border border-blue-300 bg-blue-50 px-1.5 py-0.5 text-xs text-blue-800 dark:border-blue-800 dark:bg-blue-900/30 dark:text-blue-300">
                {tag}
              </span>
            ))}
            {isIssue(entry) && (entry.data.companies?.length || 0) > 0 && (entry.data.companies || []).map((tag: string) => (
              <span class="rounded-sm border border-purple-300 bg-purple-50 px-1.5 py-0.5 text-xs text-purple-800 dark:border-purple-800 dark:bg-purple-900/30 dark:text-purple-300">
                {tag}
              </span>
            ))}
            {isIssue(entry) && (entry.data.topics?.length || 0) > 0 && (entry.data.topics || []).map((tag: string) => (
              <span class="rounded-sm border border-green-300 bg-green-50 px-1.5 py-0.5 text-xs text-green-800 dark:border-green-800 dark:bg-green-900/30 dark:text-green-300">
                {tag}
              </span>
            ))}
            {isIssue(entry) && (() => {
              // TypeScript-safe approach to access possibly undefined property
              const entryData = entry.data as any;
              return (entryData.people?.length || 0) > 0 && (entryData.people || []).map((tag: string) => (
                <span class="rounded-sm border border-orange-300 bg-orange-50 px-1.5 py-0.5 text-xs text-orange-800 dark:border-orange-800 dark:bg-orange-900/30 dark:text-orange-300">
                  {tag}
                </span>
              ));
            })()}
          </div>
        )
      }
      <div set:html={markdownToHtml(entry.data.description)}></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    if (isTouchDevice) {
      const cards = document.querySelectorAll<HTMLElement>('.arrow-card');
      
      cards.forEach(card => {
        const detailsToggle = card.querySelector<HTMLElement>('.details-touch-toggle');
        const details = card.querySelector<HTMLElement>('.card-details');
        const closeButton = card.querySelector<HTMLElement>('.close-details');

        // Handle tap on the arrow icon to toggle details
        if (detailsToggle && details) {
          detailsToggle.addEventListener('touchstart', (e: TouchEvent) => {
            // Prevent the link navigation when tapping the icon
            e.preventDefault();
            e.stopPropagation(); 

            // Toggle active class on the card
            const isActive = card.classList.toggle('touch-active');
            
            // Show/hide the details based on the active state
            if (isActive) {
              details.style.display = 'block';
              // Trigger reflow before adding opacity/transform classes for transition
              void details.offsetWidth; 
              details.style.opacity = '1';
              details.style.transform = 'translateY(0)';
            } else {
              details.style.opacity = '';
              details.style.transform = '';
              // Use transitionend event to set display: none after hiding
              details.addEventListener('transitionend', () => {
                if (!card.classList.contains('touch-active')) {
                  details.style.display = '';
                }
              }, { once: true });
            }
          }, { passive: false });
        }
        
        // Handle close button clicks/taps
        if (closeButton && details) {
          // Use 'click' for broader compatibility, handles tap too
          closeButton.addEventListener('click', (e: MouseEvent) => { 
            e.preventDefault();
            e.stopPropagation();
            
            card.classList.remove('touch-active');
            details.style.opacity = '';
            details.style.transform = '';
            details.addEventListener('transitionend', () => {
              if (!card.classList.contains('touch-active')) {
                details.style.display = '';
              }
            }, { once: true });
          });
        }
      });
      
      // Hide open popups when tapping elsewhere
      document.addEventListener('touchstart', (e: TouchEvent) => {
        const target = e.target as HTMLElement;
        // If the tap is not on a card that is currently active
        if (!target.closest('.arrow-card.touch-active')) { 
          document.querySelectorAll<HTMLElement>('.arrow-card.touch-active').forEach(activeCard => {
            activeCard.classList.remove('touch-active');
            const activeDetails = activeCard.querySelector<HTMLElement>('.card-details');
            if (activeDetails) {
              activeDetails.style.opacity = '';
              activeDetails.style.transform = '';
              activeDetails.addEventListener('transitionend', () => {
                if (!activeCard.classList.contains('touch-active')) {
                  activeDetails.style.display = '';
                }
              }, { once: true });
            }
          });
        }
      }, { passive: true });
    }
  });
</script>
